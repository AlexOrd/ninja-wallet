openapi: "3.0.2"
info:
  title: 'Ninja wallet API'
  description: 'Here will be description'
  version: '1.0'
  contact:
    name: 'Vitali'
    url: 'http://for-test.com'
    email: 'vitaliidrapaliuk@gmail.com'
  license:
    name: 'unpresence'
    
servers:
- url: 'http://localhost:3000'

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      description: 'You must sign up in our system to get access token'
      scheme: bearer
      bearerFormat: JWT
  parameters:
    accessToken:
      name: 'Access-Token'
      in: header
      description: 'token for authorization, you must attach it to header "Access-Token" every request to server (if you have it)'
      schema:
        type: string
        format: token
      required: true
    refreshToken:
      name: 'Refesh-Token'
      in: header
      description: 'token for refresh access token, you must attach it to header "Refresh-Token" every request to server (if you have it)'
      schema:
        type: string
        format: token
      required: true
  schemas:
    authentiocate:
      type: object
      description: 'just for test'
      properties:
        password: 
          type: string
          example: 'example_password'
          format: password
        email:
          type: string
          format: email
        deviceType:
          type: string
          enum: ['pc', 'mob']
  responses:
    serverError:
      description: 'server error'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              success:
                type: boolean
                example: false
              error: 
                type: 'object'
                properties:
                  code:
                    type: 'string'
                    example: 'SERVER_ERROR'
                  description:
                    example: 'correpond text'
    successResponse:
      description: 'success'
      content:
        application/json:
          schema: 
            type: 'object'
            properties:
              success:
                type: 'boolean'
    invalidDataError:
      description: 'passed data is invalid, it connected with validation data of request body, you must strictly   stick to structure of request body and types of data'
      content:
        application/json:
          schema:
            type: 'object'
            properties:
              success:
                type: boolean
                example: false
              error: 
                type: 'object'
                properties:
                  code:
                    type: 'string'
                    description: '"INVALID_DATA": means you passed invalid data in current request, it can be connected with type of data or anothe requirements; "EXCESS_FIELD": means you attached excess field to your request, stick to structure of request body; "LACK_NEEDED_FIELD": you didn`t attach required field(s) to your request'
                    enum: ['INVALID_DATA', 'EXCESS_FIELD', 'LACK_NEEDED_FIELD']
                    example: 'INVALID_DATA'
                  description:
                    type: string
                    example: 'passed data is invalid'
                    description: 'explanation of current error'
    
paths:
  '/auth/sign-up':
    post:
      security: []
      tags:
      - 'authentication'
      summary: 'sign up new user'
      description: 'it is description for my path'
      requestBody: 
        description: 'Description for this request body'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authentiocate'
      responses:
        '201':
          description: 'success'
          content:
            application/json:
              schema: 
                type: 'object'
                properties:
                  success: 
                    type: 'boolean'
                  isEmailError:
                    type: 'boolean'
                    example: false
                    description: '"true" means that user was created but occurred error connected with mail provider, it means that user doesn`t get verification code to his/her email, you can implement it using "user-email" API'
        '400':
          $ref: '#/components/responses/invalidDataError'
        '403':
          description: 'unsuccessful result of request'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  success:
                    type: boolean
                    example: false
                  error: 
                    type: 'object'
                    properties:
                      code:
                        type: 'string'
                        enum: ['LOGIN_ALREADY_USE']
                        example: 'EMAIL_ALREADY_USE'
                      description:
                        example: 'correpond text'
        '500':
          $ref: '#/components/responses/serverError'
  '/auth/sign-in':
    post:
      security: []
      tags:
      - 'authentication'
      summary: 'sign in to system'
      requestBody: 
        description: 'Description for this request body'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authentiocate'
      responses:
        '200':
          $ref: '#/components/responses/successResponse'
        '400':
          $ref: '#/components/responses/invalidDataError'
        '403':
          description: 'unsuccessful result of request, it can be connected with incorrect password or login'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  success:
                    type: boolean
                    example: false
                  error: 
                    type: 'object'
                    properties:
                      code:
                        type: 'string'
                        enum: ['INCORRECT_AUTH_DATA']
                        example: 'INCORRECT_AUTH_DATA'
                      description:
                        example: 'correpond text'
        '404':
          description: 'not found user, impossible to find user using passed login'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  success:
                    type: boolean
                    example: false
                  error: 
                    type: 'object'
                    properties:
                      code:
                        type: 'string'
                        enum: ['USER_NOT_FOUND']
                        example: 'USER_NOT_FOUND'
                      description:
                        example: 'impossible to find user using passed login'
        '500':
          $ref: '#/components/responses/serverError'
  '/auth/change-password':
    patch:
      tags:
      - 'authentication'
      summary: 'to change password'
      parameters:
        - $ref: '#/components/parameters/accessToken'
        - $ref: '#/components/parameters/refreshToken'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: 'fields "newPassword" and "confirmPassword" must be equal'
              properties:
                oldPassword:
                  type: string
                  # description: $ref: '#/components/requirements/password'
                  example: 'some_old_password'
                  description: 'up to date password'
                newPassword:
                  type: string
                  example: 'some_new_password'
                  description: 'new created password'
                confirmPassword:
                  type: string
                  example: 'some_new_password'
                  description: 'duplicate of a new password'
      responses:
        '200':
          $ref: '#/components/responses/successResponse'
        '400':
          $ref: '#/components/responses/invalidDataError'
        '403':
          description: 'unsuccessful result of request'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  success:
                    type: boolean
                    example: false
                  error: 
                    type: 'object'
                    properties:
                      code:
                        type: 'string'
                        description: 'uniq string for this error'
                        enum: ['INCORRECT_OLD_PASSWORD', 'ACCESS_DENIED']
                        example: 'INCORRECT_OLD_PASSWORD'
                      description:
                        example: '"old password" is incorrect, check it and try again'
        '500':
          $ref: '#/components/responses/serverError'              
  '/auth/check-authorization':
    get:
      tags:
      - 'authorization'
      summary: 'check authenticity of access token'
      parameters:
        - $ref: '#/components/parameters/accessToken'
        - $ref: '#/components/parameters/refreshToken'
      responses:
        '200':
          $ref: '#/components/responses/successResponse'
        '401':
          description: 'access has denied'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  success:
                    type: boolean
                    example: false
                  error: 
                    type: 'object'
                    properties:
                      code:
                        type: 'string'
                        description: 'explanation of this error'
                        enum: ['INVALID_TOKEN', 'MISSING_TOKEN', 'EXPIRED_TOKEN']
                        example: 'INVALID_TOKEN'
                      description:
                        type: string
                        example: 'passed tokem is invalid'
                        description: 'explanation of current error'
        '500':
          $ref: '#/components/responses/serverError'              
  '/auth/sign-out':
    delete:
      tags:
      - 'sign-out'
      summary: 'sign out from current device'
      parameters:
        - $ref: '#/components/parameters/accessToken'
        - $ref: '#/components/parameters/refreshToken'
      responses:
        '200':
          $ref: '#/components/responses/successResponse'
        '403':
          description: 'most likely, this is a problem with the markers, this error is rare'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  success:
                    type: boolean
                    example: false
                  error: 
                    type: 'object'
                    properties:
                      code:
                        type: 'string'
                        description: 'uniq string for this error'
                        example: ['USER_NOT_FOUND']
                      description:
                        example: 'haven`t found user bu passed data'
        '500':
          $ref: '#/components/responses/serverError'
  '/auth/sign-out/all-devices':
    delete:
      tags:
      - 'sign-out'
      summary: 'sign out from every logged device'
      parameters:
        - $ref: '#/components/parameters/accessToken'
        - $ref: '#/components/parameters/refreshToken'
      # requestBody:
      responses:
        '200':
          $ref: '#/components/responses/successResponse'
        '403':
          description: 'most likely, this is a problem with the markers, this error is rare'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  success:
                    type: boolean
                    example: false
                  error: 
                    type: 'object'
                    properties:
                      code:
                        type: 'string'
                        description: 'uniq string for this error'
                        example: ['USER_NOT_FOUND']
                      description:
                        example: 'haven`t found user bu passed data'
        '500':
          $ref: '#/components/responses/serverError'
  '/auth/restore-password/get-credentials':
    post:
      tags:
      - 'restore password'
      summary: 'to receive credentils for restore password'
      description: 'You will get token for restore password session and confirmation code to email you attached to this request'
      requestBody:
        description: 'Email must be valid and to exist in data base'
        content:
          'application/json':
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: 'example@ex.com'
                  description: 'Must be valid email of existed user'
      responses:
        '200':
          description: 'credentials has received'
          content:
            application/json:
              schema: 
                type: 'object'
                properties:
                  success:
                    type: boolean
                  confirmToken:
                    type: string
                    format: token
                    description: 'JWT for confirm restore password session, you must attach with every operation in restore password, expire in 10 minutes'
        '400':
          $ref: '#/components/responses/invalidDataError'
        '404':
          description: 'not found user, impossible to find user using passed login'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  success:
                    type: boolean
                    example: false
                  error: 
                    type: 'object'
                    properties:
                      code:
                        type: 'string'
                        enum: ['USER_NOT_FOUND']
                        example: 'USER_NOT_FOUND'
                      description:
                        example: 'impossible to find user using passed login'
        '500':
          $ref: '#/components/responses/serverError'
  '/auth/restore-password/verify-code':
    post:
      tags:
      - 'restore password'
      summary: 'to verify user'
      description: 'You must attach confirmation code from email and session token to get permission to change password'
      requestBody:
        description: 'Email must be of existed user'
        content:
          'application/json':
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: 'example@ex.com'
                  description: 'Must be valid email of existed user'
      responses:
        '200':
          $ref: '#/components/responses/successResponse'
        '400':
          $ref: '#/components/responses/invalidDataError'
        '401':
          description: 'access denied'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  success:
                    type: boolean
                    example: false
                  error: 
                    type: 'object'
                    properties:
                      code:
                        type: 'string'
                        description: 'explanation of this error'
                        enum: ['INVALID_TOKEN', 'MISSING_TOKEN', 'EXPIRED_RESTORE_PASSWORD_SESSION']
                        example: 'EXPIRED_RESTORE_PASSWORD_SESSION'
                      description:
                        type: string
                        example: 'passed tokem is invalid'
                        description: 'explanation of current error'            
        '403':
          description: 'confirmation code is incorrects'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  success:
                    type: boolean
                    example: false
                  error: 
                    type: 'object'
                    properties:
                      code:
                        type: 'string'
                        description: 'uniq string for this error'
                        example: 'INCORRECT_CONFIRMATION_CODE'
                        enum: ['INCORRECT_CONFIRMATION_CODE']
                      description:
                        example: 'correpond text'
       
        '500':
          $ref: '#/components/responses/serverError'
  '/auth/restore-password/create-password':
    patch:
      tags:
      - 'restore password'
      summary: 'to create new password'
      description: 'You must attach new password, confirmation password(just repeat) and session token, if your data corrects you wiil get "access" and "refresh" tokens in headers (Access-Token, Refresh-Token) to acces to private resources'
      requestBody:
        description: 'Email must be of existed user'
        content:
          'application/json':
            schema:
              description: 'passwords must be equals'
              type: object
              properties:
                confirmToken:
                  type: string
                  example: 'token'
                  format: token
                newPassword:
                  type: string
                  example: 'simplepassword'
                confirmPassword:
                  type: string
                  example: 'simplepassword'
      responses:
        '201':
          description: 'credentials has received'
          content:
            application/json:
              schema: 
                type: 'object'
                properties:
                  success:
                    type: boolean
                  confirmToken:
                    type: string
                    format: token
                    description: 'JWT for confirm restore password session, you must attach with every operation in restore password, expire in 10 minutes'
        '400':
          $ref: '#/components/responses/invalidDataError'           
        '401':
          description: 'access denied'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  success:
                    type: boolean
                    example: false
                  error: 
                    type: 'object'
                    properties:
                      code:
                        type: 'string'
                        description: 'explanation of this error'
                        enum: ['INVALID_TOKEN', 'MISSING_TOKEN', 'EXPIRED_RESTORE_PASSWORD_SESSION']
                        example: 'EXPIRED_RESTORE_PASSWORD_SESSION'
                      description:
                        type: string
                        example: 'passed tokem is invalid'
                        description: 'explanation of current error'
        '403':
          description: 'credentials is incorrects'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  success:
                    type: boolean
                    example: false
                  error: 
                    type: 'object'
                    properties:
                      code:
                        type: 'string'
                        description: 'uniq string for this error'
                        example: 'INCORRECT_AUTH_DATA'
                      description:
                        example: 'correpond text'
        '500':
          $ref: '#/components/responses/serverError'
  '/auth/restore-password/resend-code':
    patch:
      tags:
      - 'restore password'
      summary: 'to get new confirmation code'
      description: 'You can use this endpoint for getting new confirm code, session token will refresh too so your 10 minutes session will refresh'
      requestBody:
        description: 'Email must be of existed user'
        content:
          'application/json':
            schema:
              type: object
              properties:
                confirmToken:
                  type: string
                  format: token
      responses:
        '200':
          description: 'confirmation code has sent'
          content:
            application/json:
              schema: 
                type: 'object'
                properties:
                  success:
                    type: boolean
        '400':
          $ref: '#/components/responses/invalidDataError'
        '401':
          description: 'access denied'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  success:
                    type: boolean
                    example: false
                  error: 
                    type: 'object'
                    properties:
                      code:
                        type: 'string'
                        description: 'explanation of this error'
                        enum: ['INVALID_TOKEN', 'MISSING_TOKEN', 'EXPIRED_RESTORE_PASSWORD_SESSION']
                        example: 'EXPIRED_RESTORE_PASSWORD_SESSION'
                      description:
                        type: string
                        example: 'passed tokem is invalid'
                        description: 'explanation of current error'            
       
        '500':
          $ref: '#/components/responses/serverError'
  '/auth/devices-with-opened-app':
    get:
      tags:
      - 'opened app on devices'
      summary: 'check authenticity of access token'
      parameters:
        - $ref: '#/components/parameters/accessToken'
        - $ref: '#/components/parameters/refreshToken'
      responses:
        '200':
          description: 'user has deleted'
          content:
            application/json:
              schema: 
                type: 'object'
                properties:
                  success:
                    type: boolean
                  devicesList:
                    type: array
                    items:
                      type: object
                      properties:
                        _id: 
                          type: string
                          format: 'data base id'
                          example: '60743e5a93b1333ed463d335'
                        deviceType:
                          type: string
                          description: 'type of the device you use just now'
                          enum: ['pc', 'mob']
                          example: 'mob'
                        lastLogin:
                          type: string
                          format: 'date'
                          description: 'Date and time when this device was last login, it is valid date string and you can use it inside methods of object Date'
                          example: '2021-04-12T12:34:34.099Z'
                  currentDeviceID:
                    type: string
                    description: 'ID of the device you use just now'
                    example: '60743e5a93b1333ed463d335'
        '500':
          $ref: '#/components/responses/serverError'               
  '/user-email/verification':
    patch:
      tags:
      - 'user-email'
      summary: 'confirmation code has verified'
      parameters:
        - $ref: '#/components/parameters/accessToken'
        - $ref: '#/components/parameters/refreshToken'
      requestBody: 
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                confirmCode:
                  type: 'string'
                  description: 'verify code from user email, must have length 6 characters'
                  example: '329872'
      responses:
        '200':
          description: 'user email has verification'
          content:
            application/json:
              schema: 
                type: 'object'
                properties:
                  success:
                    type: boolean
        '403':
          description: 'confirmation code is incorrects'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  success:
                    type: boolean
                    example: false
                  error: 
                    type: 'object'
                    properties:
                      code:
                        type: 'string'
                        description: 'uniq string for this error'
                        example: 'INCORRECT_CONFIRMATION_CODE'
                        enum: ['INCORRECT_CONFIRMATION_CODE']
                      description:
                        example: 'correpond text'
        '500':
          $ref: '#/components/responses/serverError'                  
  '/user-email/resend-code':
    patch:
      tags:
      - 'user-email'
      summary: 'to resend new verification code to email'
      parameters:
        - $ref: '#/components/parameters/accessToken'
        - $ref: '#/components/parameters/refreshToken'
      responses:
        '200':
          description: 'confirmation code has sent'
          content:
            application/json:
              schema: 
                type: 'object'
                properties:
                  success:
                    type: boolean
        '500':
          $ref: '#/components/responses/serverError'                   
  '/user-email/change':
    patch:
      tags:
      - 'user-email'
      summary: 'to change user email'
      parameters:
        - $ref: '#/components/parameters/accessToken'
        - $ref: '#/components/parameters/refreshToken'
      requestBody: 
        description: 'Description for this request body'
        content:
          application/json:
            schema:
              type: object
              description: 'just for test'
              properties:
                email:
                  type: string
                  format: email
        
      responses:
        '200':
          $ref: '#/components/responses/successResponse'
        '500':
          $ref: '#/components/responses/serverError'                    
                    
                    
                    
                    
                    