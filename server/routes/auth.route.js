const express = require('express');
const router = express.Router();
const { signIn } = require('../controllers/auth/sign_in');
const { signUp } = require('../controllers/auth/sign_up');
const { signOut } = require('../controllers/auth/sign_out/sign_out');
const { changePassword } = require('../controllers/auth/change_password');
const { validateAuthData } = require('../middlewares/auth/route_validators/validate_auth_data');
const { signOutEveryDevice } = require('../controllers/auth/sign_out/sign_out_every_device');
const { signOutSomeDevice } = require('../controllers/auth/sign_out/sign_out_some_device');
const { giveDevicesWithOpenedApp } = require('../controllers/auth/give_devices_with_opened_app');
const { createNewPassword } = require('../controllers/auth/restore_password/new_password');
const {
  verifyCredentials,
} = require('../middlewares/auth/route_verifiers/verify_rest_pass_credentials');
const { verifyConfirmCode } = require('../controllers/auth/restore_password/verify_confirm_code');
const {
  validateChangingPassword,
} = require('../middlewares/auth/route_validators/validate_changing_password');
const { issueCredentials } = require('../controllers/auth/restore_password/issue_credentials');

const {
  validateCredentialsIssue,
} = require('../middlewares/auth/route_validators/validate_credential_issue');
const {
  validateConfirmCode,
} = require('../middlewares/auth/route_validators/validate_confirm_code');
const { validateDeviceID } = require('../middlewares/auth/route_validators/validate_device_id');
const {
  validateNewPassCreating,
} = require('../middlewares/auth/route_validators/validate_new_password_creating');

const {
  checkAccessAndProvideUserID,
} = require('../middlewares/auth/route_verifiers/check_access_and_provide_user_id');

const { reissueCredentials } = require('../controllers/auth/restore_password/reissue_credentials');
const { checkAuthorization } = require('../controllers/auth/check_authorization');


/**
 * @swagger
 * tags:
 *   - name: TEST
 *     description: TEST
 */

/**
 * @swagger
 * definitions:
 *   User:
 *     type: object
 *     properties:
 *       id:
 *         type: integer
 *         description: Unique identifier representing a specific user
 *         example: 2
 *       first_name:
 *         type: string
 *         description: first name of the user
 *         example: Krishna
 *       last_name:
 *         type: string
 *         description: last name of the user
 *         example: Timilsina
 *       email:
 *         type: string
 *         description: email of the user
 *         required: true
 *         example: test@gmail.com
 *       password:
 *         type: string
 *         description: password of the user
 *         required: true
 *         example: "1234"
 *       status:
 *         type: integer
 *         description: status of the user
 *         example: 1
 *       created_at:
 *         type: string
 *         format: date-time
 *         description: User creation datetime
 *       updated_at:
 *         type: string
 *         format: date-time
 *         description: User update datetime
 *   Error:
 *     type: object
 *     properties:
 *        message:
 *           type: string
 *        error:
 *           type: boolean
 *           default: true
 */

/**
 * @swagger
 * securityDefinitions:
 *   Bearer:
 *     description: |
 *            For accessing the API a valid JWT token must be passed in all the queries in
 *            the 'Authorization' header.
 *
 *
 *            A valid JWT token is generated by the API and returned as answer of a call
 *            to the route /auth/login giving a valid user & password.
 *
 *
 *            The following syntax must be used in the 'Authorization' header:
 *
 *            Bearer xxxxxx.yyyyyyy.zzzzzz
 *     type: apiKey
 *     name: Authorization
 *     in: header
 */

 /**
 * @swagger
 * /auth/sign-up:
 *   post:
 *     tags:
 *       - TEST
 *     summary: "Create a new user"
 *     security:
 *        - Bearer: []
 *     operationId: storeUser
 *     consumes:
 *       - application/json
 *     produces:
 *       - application/json
 *     parameters:
 *       - name: body
 *         in: body
 *         description: Created user object
 *         required: true
 *         schema:
 *           $ref: "#/definitions/User"
 *     responses:
 *       200:
 *         description: OK
 *         schema:
 *           $ref: "#/definitions/User"
 *       403:
 *          description: User not found
 *          schema:
 *             $ref: '#/definitions/Error'
 */

router
  .post('/sign-up', validateAuthData, signUp)
  .post('/sign-in', validateAuthData, signIn)
  .delete('/sign-out', checkAccessAndProvideUserID, signOut)
  
  .delete('/sign-out/every-device', checkAccessAndProvideUserID, signOutEveryDevice)
  .delete('/sign-out/some-device', validateDeviceID, checkAccessAndProvideUserID, signOutSomeDevice)
  .get('/devices-with-opened-app', checkAccessAndProvideUserID, giveDevicesWithOpenedApp)
  .get('/check-authorization', checkAccessAndProvideUserID, checkAuthorization)
  .patch('/change-password', validateChangingPassword, checkAccessAndProvideUserID, changePassword)

  .post('/restore-password/get-credentials', validateCredentialsIssue, issueCredentials)
  .post('/restore-password/verify-code', validateConfirmCode, verifyCredentials, verifyConfirmCode)
  .patch(
    '/restore-password/create-password',
    validateNewPassCreating,
    verifyCredentials,
    createNewPassword,
  )
  .patch('/restore-password/resend-code', verifyCredentials, reissueCredentials);

module.exports = router;
